{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,QAE/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAWN,IAVA,IAAMC,EAAaC,SACjBN,SAASC,cAAc,uBAAuBM,OAE1CC,EAAYF,SAChBN,SAASC,cAAc,sBAAsBM,OAEzCE,EAAcH,SAClBN,SAASC,cAAc,wBAAwBM,OAGxCG,EAAI,EAAGA,EAAID,EAAaC,IAC/BC,EAAcD,EAAI,EAAGL,EAAaK,EAAIF,GACnCI,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,EAAAlB,GAASmB,OAAOC,QAAQ,qBAAoCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAEnEK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,EAAAlB,GAASmB,OAAOI,QAAQ,oBAAmCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAIvE,SAASJ,EAAcG,EAAUC,GAC/B,OAAO,IAAIO,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAET,WAAUC,UAEpBS,EAAO,CAAEV,WAAUC,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const delayInput = parseInt(\n    document.querySelector('input[name=\"delay\"]').value\n  );\n  const stepInput = parseInt(\n    document.querySelector('input[name=\"step\"]').value\n  );\n  const amountInput = parseInt(\n    document.querySelector('input[name=\"amount\"]').value\n  );\n\n  for (let i = 0; i < amountInput; i++) {\n    createPromise(i + 1, delayInput + i * stepInput)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n});\n"],"names":["$6JpON","parcelRequire","document","querySelector","addEventListener","event","preventDefault","delayInput","parseInt","value","stepInput","amountInput","i","createPromise","then","param","position","delay","$parcel$interopDefault","Notify","success","concat","catch","failure","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.3a5b43d7.js.map"}